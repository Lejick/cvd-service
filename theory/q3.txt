У объекта пользователь есть версионность, поле (version),
как правильно придумать optimistic lock для объекта, чтобы максимально снизить вероятность попадания
в lock (oldVersion > newVersion) и при этом использовать многопоточное изменение этого объекта в разных инстансах этого микросервиса.

Optimistic Locking создан для значений, которые часто читаются и редко пишутся, и само изменение значений занимает мало времени.
Хороший пример - считывание настройки из базы. В случае выброса исключения мы в программной логике сами решаем, повторить запрос или вернуть ошибку пользователю.
В целом, в spring нужно добавить аттрибут version с аннотацией @Version в нужную сущность JPA


Однако при использовании Optimistic Locking для обекта Пользователь возможно слеудющая проблема:
1. User A открывает форму для ввода данных и начинает ее редактировать (у него version=1)
2. User B также открывает форму этого пользователя (также version=1)
3. User A сохраняет данные (version=2)
4. При попытке сохранить данные User B получает ошибку, вся его работа пропала(

Для решения этой проблемы можно ввести отдельную таблицу с данными о текущем изменении значений полей (для каждого поля будет своя колонка Version),
а также поля с именем пользователя, который делает изменения. Сохранение значений в эту таблицу будет происходить втоматически.
Так каждый пользователь будет получать уведомление о том, что данные кем-то меняются (аналог - одновременное редактирование документов в Google Docs)