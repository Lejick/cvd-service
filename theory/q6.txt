Причины перехода: 

1. Перевод данных в новый формат.
   SQL на ранних этапах развития сервиса, но затем быстродействия стало не хватать, решили использовать новую БД
2. Распиливание монолита на микросервисы, соответственно БД также разделяется на несколько, необходим перенос данных 

  

Проблемы:
1. Большой объем исторических данных, нужно делать дамп и загружать его в новую базу
2. Необходимо сделать "бесшовную" миграцию без простоя сервиса
3. Разный формат данных
4. В случае микросервисов - все микросервисы должны перейти одновременно на новый формат 

 

Best Practice 

1. Использовать паттерн “репозиторий”, чтобы отделить бизнес-логику от хренения данных 
2. Один сервис - одна БД, соответственно только один сервис может менять каждую конкретную сущность. 
3. Обеспечить перенос данных без прерывания работы 
4. Обеспечить асинхронность (сервис работает со старыми сущностями, в то время как данные переносятся в фоновом режиме. Затем переключаемся на новые сервисы с новой структурой данных) 

  

Рассмотрим 2й вариант, когда нужно выделить сущности из старого сервиса, и смигрировать их на новый,
со сменой БД (например, MySQL->Postgres) 

1. Обеспечить параллельную запись данных из старой системы в новую (пока старая еще активно используется).
   Для этого можно использовать очередь сообщений, например RabbitMQ.

2. Исторические данные из старой системы можно перенести с помощью дампа