Как сделать 99.9% доступности для микросервисной архитектуры.


Чтобы добиться доступности сервисов, нужно устранить причины НЕ доступности (ваш кэп):
1. Человеческий фактор (баги, ошибки при выкладывании сервисов)
2. Единая точка отказа системы
3. Проблемы с оборудование (в датацентре или сеть)
4. Аномальные всплески трафика
5. Недоступность сторонних АПИ

Решения:
1. Человеческий фактор (баги, ошибки при выкладывании сервисов) :
- автоматические тесты на гитхаб/гитлаб при merge request
- Code Review
- В случае микросервисов - выкладывание новой фичи на небольшое кол-во серверов, затем при успешном выполнении коды выкладываем на остальные
- Система мониторинга (кол-во запросов, кол-во ошибок, состояние сервисов). Logstash/Kibana/New Relic
- CI/CD  - быстрое выкладывание заплаток
- Наличие “переключателей” в рабочей системе, чтобы можно было выключить багнутые         функции
- Введение KPI - время от обнаружения инцидента до его полного устранения

2. Единая точка отказа системы
- Микросервисная архитектура. Docker/Kubernetes для дополнительного развертывания нод и замены упавших.

- Обязательно наличие отдельной базы для каждого типа сервисов (например сервиса регистрации), также бэкап этой базы должен писаться дополнительно.
    Разделение баз на мастер/реплику. В мастер пишем и читаем запросы, которые должны обрабатываться  real time.
    Из реплики берем какую-то справочную информацию, где не так важна скорость выполнения и новизна данных

- Есть варианты, при которых на каждом инстансе  микросервиса крутится отдельная БД, которые затем согласовывают данные (использование распределенных БД)

3.Проблемы с оборудование (в датацентре или сеть)

- Проблемы с датацентрами - располагать сервисы в нескольких датацентрах. Обычно так делают с привязкой к локации, для более быстрого отклика и распределении нагрузки

- Использовать балансировщик нагрузки, при проблеме с ДЦ или сетью

- Использовать кэши - при проблемах с сетью при общении фронтэнда с микросер висами это может помочь на первое время, чтобы пользователи не видели “мёртвую” страницу

- Использовать “модульную” систему при проектировании страницы портала. Если часть сервисов откажет, то портал потеряет только часть своей функциональности, а не ляжет весь

4. Аномальные всплески трафика
- Кэши

- Балансировщик нагрузки

- Автоматическое развертывание нод средствами Kubernetes или подобных инструментов

- Аппаратные и программные средства защиты от DDoS атак (например. Запрет на отправку больше определенного кол-ва запросов с одного ip адреса)

- Использование возможностей асинхронной обработки запросов, очереди сообщений

5. Недоступность сторонних АПИ

-Заглушки. В случае недоступности сервиса выдавать вменяемое сообщение системе и пользователю.
 Возможность переключаться на другие каналы “на лету”, автоматически или через настройки

-Модульная система. Заглохший функционал одной части портала не должен отменять работу остальных

-Асинхнонность там, где это возможно. Не смогли достучаться сейчас - отложили запрос на определенный таймаут, вывели об этом сообщение пользователю

